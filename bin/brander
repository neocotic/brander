#!/usr/bin/env node

/*
 * Copyright (C) 2022 neocotic
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict';

/* eslint-disable no-process-exit */

const debug = require('debug');
const program = require('commander');

const Brander = require('../src/brander');
const ConfigLoader = require('../src/config/config-loader');
const Logger = require('../src/logger');
const { version } = require('../package.json');

(async() => {
  program
    .version(version)
    .usage('[options]')
    .option('-c, --config <path>', 'use configuration from this file')
    .option('-d, --debug', 'enable debug level logging')
    .option('--no-color', 'disables color output')
    .option('--only-assets', 'only generate assets')
    .option('--only-docs', 'only generate documentation')
    .option('-q, --quiet', 'disables all logging output')
    .parse(process.argv);

  if (program.debug && !program.quiet) {
    debug.enable('brander*');
  }

  const logger = new Logger({ enabled: !program.quiet });

  try {
    const configLoader = new ConfigLoader({ logger });
    const config = await configLoader.load(program.config);
    const brander = new Brander(config);

    await brander.generate({
      skipAssets: program.onlyDocs,
      skipDocs: program.onlyAssets
    });
  } catch (e) {
    logger.error(e.stack);

    process.exit(1);
  }
})();
